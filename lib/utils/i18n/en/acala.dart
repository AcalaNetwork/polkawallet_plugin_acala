const Map<String, String> enDex = {
  'acala': 'Acala Defi Hub',
  'airdrop': 'Airdrop',
  'transfer': 'Transfer',
  'receive': 'Receive',
  'dex.title': 'Swap',
  'dex.pay': 'Pay',
  'dex.receive': 'Receive',
  'dex.rate': 'Price',
  'dex.route': 'Route',
  'dex.slippage': 'Slippage Tolerance',
  'dex.slippage.error': 'Valid Slippage: 0.1%~49.9%',
  'dex.tx.pay': 'Pay with',
  'dex.tx.receive': 'Receive',
  'dex.min': 'Minimum received',
  'dex.max': 'Maximum sold',
  'dex.fee': 'Liquidity provider fee',
  'dex.impact': 'Price impact',
  'dex.lp': 'Liquidity',
  'dex.lp.add': 'Add Liquidity',
  'dex.lp.remove': 'Remove Liquidity',
  'boot.title': 'Bootstrap',
  'boot.provision': 'Provisioning',
  'boot.enabled': 'Enabled',
  'boot.provision.info':
      'The pool will start when the following conditions are met:',
  'boot.provision.condition.1': 'The liquidity target reaches',
  'boot.provision.condition.2': 'Time after',
  'boot.provision.or': 'or',
  'boot.provision.met': 'met',
  'boot.provision.add': 'Add Provision',
  'boot.ratio': 'Current ratio',
  'boot.total': 'Total',
  'boot.my': 'My Liquidity Provision',
  'boot.my.est': 'Est.',
  'boot.my.share': ' Share',
  'boot.my.token': ' LP token',
  'boot.add': 'Add',
  'loan.title': 'Self Serviced Loan',
  'loan.borrowed': 'Borrowed',
  'loan.collateral': 'Collateral',
  'loan.ratio': 'Collateral Ratio',
  'loan.borrow': 'Borrow',
  'loan.payback': 'Payback',
  'loan.deposit': 'Deposit',
  'loan.withdraw': 'Withdraw',
  'loan.withdraw.all': 'Withdraw all collateral in the meanwhile',
  'loan.create': 'Create Loan',
  'liquid.price': 'Liquidation Price',
  'liquid.ratio': 'Liquidation Ratio',
  'liquid.ratio.require': 'Required Ratio',
  'liquid.price.new': 'New Liquidation Price',
  'liquid.ratio.current': 'Current Ratio',
  'liquid.ratio.new': 'New Collateral Ratio',
  'collateral.price': 'Current Price',
  'collateral.ratio': 'Interest Rate',
  'collateral.ratio.year': 'APR',
  'collateral.interest': 'Daily Interest',
  'collateral.require': 'Required',
  'borrow.limit': 'Borrow Limit',
  'borrow.able': 'Able to Borrow',
  'withdraw.able': 'Able to Withdraw',
  'loan.amount': 'Amount',
  'loan.amount.debit': 'How much would you like to borrow?',
  'loan.amount.collateral': 'How much would you deposit as collateral?',
  'loan.max': 'Max',
  'loan.txs': 'History',
  'loan.warn':
      'Debt should be greater than 1aUSD or payback all, this action will have 1aUSD debt left. Are you sure to continue?',
  'loan.warn.KSM':
      'Debt should be greater than 1kUSD or payback all, this action will have 1kUSD debt left. Are you sure to continue?',
  'loan.warn.back': 'Back to modify',
  'loan.my': 'My Loans',
  'loan.incentive': 'Incentives',
  'loan.apy': 'APY',
  'txs.action': 'Action',
  'payback.small': 'The remaining debt is too small.',
  'earn.title': 'Earn',
  'earn.add': 'Add Liquidity',
  'earn.remove': 'Remove Liquidity',
  'earn.get': 'Withdraw Rewards',
  'earn.reward.year': 'Annualized Rewards',
  'earn.fee': 'Swap Fee',
  'earn.pool': 'Liquid Pool',
  'earn.stake.pool': 'Staking Pool',
  'earn.deposit.user': 'My Deposit',
  'earn.share': 'Share',
  'earn.reward': 'Rewards',
  'earn.available': 'Available',
  'earn.stake': 'Stake',
  'earn.unStake': 'Unstake',
  'earn.staked': 'Staked',
  'earn.claim': 'Claim',
  'earn.incentive': 'Incentive',
  'earn.saving': 'Interest',
  'earn.withStake': 'with stake',
  'earn.withStake.txt': 'whether to stake added LP-Tokens to obtain rewards',
  'earn.fromPool': 'from staking pool',
  'earn.fromPool.txt': 'whether to unstake and withdraw from staking pool',
  'faucet.title': 'Faucet',
  'faucet.brief': 'Get test Tokens of Acala testnet.',
  'faucet.ok': 'Test Tokens were sent.',
  'faucet.limit': 'Exceeds limited amount.',
  'faucet.error': 'Request error, try again later.',
  'homa.title': 'Liquid',
  'homa.mint': 'Mint',
  'homa.redeem': 'Redeem',
  'homa.now': 'Redeem Now',
  'homa.era': 'Redeem in Era',
  'homa.unbond': 'Wait for Unbounding',
  'homa.pool': 'Staking Pool',
  'homa.pool.total': 'Total',
  'homa.pool.bonded': 'Total Bonded',
  'homa.pool.free': 'Total Free',
  'homa.pool.unbonding': 'Unbonding',
  'homa.pool.ratio': 'Bond Ratio',
  'homa.pool.low': 'Insufficient pool balance',
  'homa.user': 'My DOT Redeem',
  'homa.user.unbonding': 'Unbonding',
  'homa.user.time': 'Unlock Time',
  'homa.user.blocks': 'Blocks',
  'homa.user.redeemable': 'Redeemable',
  'homa.mint.profit': 'Estimated Profit / Era',
  'homa.redeem.fee': 'Claim Fee',
  'homa.redeem.era': 'Current Era',
  'homa.redeem.period': 'Unbonding Period',
  'homa.redeem.day': 'Days',
  'homa.redeem.free': 'Pool',
  'tx.fee.or': 'or equivalent in other tokens',
  'nft.title': 'NFTs',
  'nft.testnet': 'Mandala testnet badge',
  'candy.title': 'Candy Claim',
  'candy.claim': 'Claim',
  'candy.amount': 'Candies to claim',
  'candy.claimed': 'Claimed',
  'cross.chain': 'To Chain',
  'cross.xcm': 'Cross Chain',
  'cross.chain.select': 'Select Network',
  'cross.exist': 'destination chain existential deposit',
  'cross.exist.msg':
      '\nThe minimum amount that an account should have to be deemed active.\n',
  'cross.fee': 'destination chain transfer fee',
  'cross.warn': 'Warning',
  'cross.warn.network':
      'Exchanges do not currently support direct transfers of KSM to/from Karura. In order to successfully send KSM to an exchange address, it is required that you first complete an Cross-Chain-Transfer of the token(s) from Karura to Kusama.',
  'transfer.exist': 'existential deposit',
  'transfer.fee': 'estimated transfer fee',
};
